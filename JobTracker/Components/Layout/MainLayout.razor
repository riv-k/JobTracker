@using JobTracker.Components.Shared  @* Should probs add these to _Imports.razor later*@
@using JobTracker.Models
@using JobTracker.Data
@inject JobApplicationDB Database
@inherits LayoutComponentBase
@inject IJSRuntime JS

<div class="main-page">

    <header class="title">  
        <h1>My Jobs</h1>
        <button class="add-job" @onclick="() => ShowJobModal()">+Add Job</button>
    </header>

    <CascadingValue Name="ShowJobModalCallback" Value="@ShowJobModalAction" IsFixed="true">
        <CascadingValue Name="RegisterRefreshCallBack" Value="(Action<Action>)RegisterRefreshCallback" IsFixed="true">
            <main class="main-content-container">
                @Body
            </main>
        </CascadingValue>
    </CascadingValue>

    <JobModal 
    IsModalVisible="isModalVisible"
    CloseModal="CloseModal"
    OnSave="HandleSaveJobApplication"
    JobData="selectedJob" />

</div>

@code {
    private bool isModalVisible = false;
    private JobApplicationDTO? selectedJob = null;
    private Action? RefreshJobListAction;

    // Create an Action delegate that can be passed to child components
    private Action<JobApplicationDTO?> ShowJobModalAction => (job) =>
    {
        ShowJobModal(job);
    };

    public void RegisterRefreshCallback(Action refreshAction)
    {
        RefreshJobListAction = refreshAction;
    }

    private async Task HandleSaveJobApplication(JobSubmission submission)
    {
        Console.WriteLine("Handle SaveJobApplication");
        try
        {
            if (submission.ExistingJobId.HasValue)
            {
                // This is an edit operation
                await Database.UpdateJobApplicationAsync(submission.ExistingJobId.Value, submission.Job);
            }
            else
            {
                // This is a create operation
                await Database.SaveJobApplicationAsync(submission.Job);
            }

            // Refresh the job list 
            RefreshJobListAction?.Invoke();            
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }

    }


    private void ShowJobModal(JobApplicationDTO? job = null)
    {
        selectedJob = job; 
        isModalVisible = true; // Show the modal when the button is clicked
        StateHasChanged(); 

    }

    private void CloseModal()
    {
        isModalVisible = false; // Close the modal when the user finishes
        selectedJob = null;
    }
}