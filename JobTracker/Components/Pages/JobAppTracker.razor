@page "/"
@using JobTracker.Models
@inject JobApplicationDB Database
@inject IJSRuntime JS

<div class="main-content">
    @* Loading in status containers and population them with job applications *@
    @foreach (var container in jobStatusContainers)
    {
        <div class="status-container">
            <p>@container.Status</p>
            @foreach (var job in container.JobApplications)
            {
                <div class="job-application" draggable="true" @onclick="() => OnJobClick(job)">
                    <h4>@job.CompanyName</h4>
                    <p>@job.JobTitle</p>
                    <p>@job.DateApplied</p>
                </div>
            }
        </div>
    }
</div>


@code {
    private List<JobStatusContainer> jobStatusContainers = new();

    [CascadingParameter(Name = "ShowJobModalCallback")]
    public Action<JobApplicationDTO?>? ShowJobModal { get; set; }

    [CascadingParameter(Name = "RegisterRefreshCallback")]
    public Action<Action>? RegisterRefreshCallback { get; set; }

    protected override void OnInitialized()
    {
        // Initialize containers synchronously
        jobStatusContainers = new List<JobStatusContainer>
        {
            new JobStatusContainer("Interested"),
            new JobStatusContainer("Applied"),
            new JobStatusContainer("Interview"),
            new JobStatusContainer("Offer"),
            new JobStatusContainer("Rejected")
        };

        RegisterRefreshCallback?.Invoke(RefreshJobList); // Register with layout
        _ = LoadJobApplicationsAsync(); // Load jobs
    }

    private async Task LoadJobApplicationsAsync()
    {
        var allJobs = await Database.GetJobApplicationsAsync();

        foreach (var job in allJobs)
        {
            var container = jobStatusContainers.FirstOrDefault(c => c.Status == job.Status);
            if (container != null)
            {
                container.JobApplications.Add(job);
            }
        }

        // Notify the UI that data has changed
        await InvokeAsync(StateHasChanged);
    }

    private void RefreshJobList()
    {
        foreach (var container in jobStatusContainers)
            container.JobApplications.Clear();

        _ = LoadJobApplicationsAsync();
    }

    private void OnJobClick(JobApplicationDTO job)
    {
        // Call the callback method from parent layout to show the modal with job data
        if (ShowJobModal == null)
        {
            JS.InvokeVoidAsync("alert", "ShowJobModal callback is not available");
            return;
        }

        ShowJobModal.Invoke(job);
    }
}
